public class Main {

    /*
    План
    1) Граф
    2) Алгоритм Дейкстры
     */

    /*
    Теория
    Глава 13 - знакомство с графами(стр. 574)
    Алгоритм Дейкстры - Глава 14(стр. 639)

    Графы - общее понятие для деревьев. Дерево - разновидность графа.
    Как правило графы нужны не для хранения и доступа к данным, а для решения специфических задач. Например:
    поиск кратчайшего пути, поиск количества возможных путей и т.д.

    Алгоритм Дейстры - способ поиск кратчашего пути. В книге листинг 14.2(стр. 652)

    Не путайте термин "Матрица" c двумерным массив(пример двумерного массива int[][] mtx). Важно понимать, что в контексте
    графом матрицы прежде всего служат для математических вычислений, а не для доступа к элементам.

    Задача стр. 637 - Задача выбора кратчайшего пути

    Решение
    Первый агент находится в пунтке A и знает, что в B можно доехать за 50 долларов, а в D за 80
    Нанимаем еще одного агента и отправляем его на станцию B, потому что она самая дешевая
    Прибыв на станцию B, агент узнает, что через эту станцию за 60 долларов можно добраться на станцию С - запишем это маршрут
    в таблицу, также можно добраться на станцию D за 90 долларов, таким образом путь в D из A через В будет стоить: 90 +  50 = 140, что
    дороже чем сразе поехат в D через А, таким образом данный маршрут в таблицу не вписывается

    Сейчас можно выделить 3 категории городов:
    1) Города с агентом, т.е. входящие в дерево( на втором шаге это A и В)
    2) Города с известной стоимостью(на втором шаге добаляем в предыдущим городам С и D)
    3) Неизвестные города

    Отправляем третьего агента в город D
    Узнаем, что в пункт С через D можно добраться за: 80 + 20 = 100, т.е. дешевле, что через B. Запишем более дешевый путь
    в город С
    Также агент обнаружил, что из D можно добраться до E за 70 долларов, запишем стоимость маршрута в пунтк E: 80 + 70 = 150

    Отправим четвертого агента в пункт С через D
    Агент обнаруживает, что из пунтка С можно добраться до пункта E за 40 долларов. Посчитаем стоимость нового маршрута:
    80+ 20 + 40 = 140. Запишем более дешевый маршрут в таблицу

    Отправляем агента в город E   и узнаем, что есть еще один маршрут в пункт B, но он значительно дороже первого: стоимость
    дороги в пункт E + стоимость 50 из E в B. Других путей больше нет. Теперь все пути в города нам известны и известны стоимости
    маршрутов между ними, более того проводя сравнение стоимостей мы нашли самуе дешевые пути между каждыми городами





                                              Таблица
          Из города А                      B                         C                    D                          E
             1 шаг                      50(через А)              ----                80(через А)                  -----
             2 шаг                      50(через А)           110(через B)           80(через A)                  -----
             3 шаг                      50(через А)           100(через D)           80(через A)               150(через D)
             4 шаг                      50(через А)           100(через D)           80(через A                140(через C)
             5 шаг                      50(через А)           100(через D            80(через A)               140(через C)
             Запрограммируем решение(исходник 14 глава. папка path, класс path)
     */




    /*
    Заметки
    В принципе выжить в IT без математики можно, но ее понимание значительно расшириет спект задач, которые Вы сможете решить
    Алгоритмы занимающиеся оптимизацией, как правило, имеют экспоненциальный рост сложности (возведение в степень), т.е. непригодны
    для решения крупных задач - просто ни один компьютер, ни все вместе взятые компьютеры не смогу решить такую задачу даже
    за миллиард лет
     */


    public static void main(String[] args) {
        Graph theGraph = new Graph();
        theGraph.addVertex('A');     // 0  (start)
        theGraph.addVertex('B');     // 1
        theGraph.addVertex('C');     // 2
        theGraph.addVertex('D');     // 3
        theGraph.addVertex('E');     // 4

        theGraph.addEdge(0, 1, 50);  // AB 50
        theGraph.addEdge(0, 3, 80);  // AD 80
        theGraph.addEdge(1, 2, 60);  // BC 60
        theGraph.addEdge(1, 3, 90);  // BD 90
        theGraph.addEdge(2, 4, 40);  // CE 40
        theGraph.addEdge(3, 2, 20);  // DC 20
        theGraph.addEdge(3, 4, 70);  // DE 70
        theGraph.addEdge(4, 1, 50);  // EB 50

        System.out.println("Shortest paths");
        theGraph.path();             // shortest paths
        System.out.println();
    }

    //TODO Изучить код

    /*
    ДЗ
    В прошлом проекте разобрать код дерева и ознакомиться с текущим проектом.
    
     */
}
